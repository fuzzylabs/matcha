# Default values for zenml.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# ZenML server related options.
zenml:
  replicaCount: 1

  image:
    repository: zenmldocker/zenml-server
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag:

  debug: true

  # Flag to enable/disable the tracking process of the analytics
  analyticsOptIn: true

  # ZenML server deployment type. This field is used for telemetry purposes.
  # Example values are "local", "kubernetes", "aws", "gcp", "azure".
  deploymentType:

  # The ZenML authentication scheme. Use one of:
  #
  # NO_AUTH - No authentication
  # HTTP_BASIC - HTTP Basic authentication
  # OAUTH2_PASSWORD_BEARER - OAuth2 password bearer with JWT tokens
  authType: OAUTH2_PASSWORD_BEARER

  # The secret key used to sign JWT tokens. Only relevant if the
  # OAUTH2_PASSWORD_BEARER authentication scheme is used. This should be set to
  # a random string with a recommended length of at least 32 characters, e.g.:
  #
  #   ```python
  #   from secrets import token_hex
  #   token_hex(32)
  #   ```
  #
  # or:
  #
  #   ```shell
  #   openssl rand -hex 32
  #   ```
  #
  # If not explicitly set, a random key will be generated when the helm
  # chart is installed and reused for all subsequent upgrades.
  jwtSecretKey:

  # The root URL path to use when behind a proxy. This is useful when the
  # `rewrite-target` annotation is used in the ingress controller, e.g.:
  #
  # ```yaml
  # rootUrlPath: /zenml
  #
  # ingress:
  #   enabled: true
  #   className: "nginx"
  #   annotations:
  #     nginx.ingress.kubernetes.io/rewrite-target: /$1
  #   host:
  #   path: /zenml/?(.*)
  # ```
  rootUrlPath:

  defaultProject: default
  defaultUsername: default
  # Use your own password here
  defaultPassword: zenml

  # MySQL database configuration. If not set, a local sqlite database will be
  # used, which will not be persisted across pod restarts.
  # NOTE: the certificate files need to be copied in the helm chart folder and
  # the paths configured here need to be relative to the root of the helm chart.
  database:
    {}
    # url: "mysql://admin:password@zenml-mysql:3306/database"
    # sslCa: /path/to/ca.pem
    # sslCert: /path/to/client-cert.pem
    # sslKey: /path/to/client-key.pem
    # sslVerifyServerCert: True

  # Secrets store settings. This is used to store centralized secrets.
  secretsStore:
    # Set to false to disable the secrets store.
    enabled: true

    # The type of secrets store to use. Use one of:
    #
    # sql - Use the same SQL database as the ZenML server
    # aws - Use the AWS Secrets Manager as a secrets store
    # gcp - Use the GCP Secrets Manager as a secrets store
    # azure - Use the Azure Key Vault as a secrets store
    # hashicorp - Use the HashiCorp Vault as a secrets store
    # custom - Use a custom secrets store implementation (needs a custom
    #          ZenML server image with the custom secrets store implementation
    #          installed)
    #
    # Depending on the type, additional configuration options may be required
    # under the respective sections.
    #
    type: sql

    # SQL secrets store configuration. Only relevant if the `sql` secrets store
    # type is configured.
    sql:
      # The secret key used to encrypt secrets in the SQL database. Only relevant
      # if the SQL secrets store type is used. This should be set to a random
      # string with a recommended length of at least 32 characters, e.g.:
      #
      #   ```python
      #   from secrets import token_hex
      #   token_hex(32)
      #   ```
      #
      # or:
      #
      #   ```shell
      #   openssl rand -hex 32
      #   ```
      #
      # If not set, database secret encryption will be disabled.
      #
      # IMPORTANT: If you configure encryption for your SQL database secrets
      # store, you should keep this value somewhere safe and secure, as it will be
      # required to decrypt the secrets in the database. If you lose the
      # encryption key, you will not be able to decrypt the secrets in the
      # database and will have to reset them. You should not change this value
      # after you have already configured encryption for your SQL database
      # secrets store.
      encryptionKey:

    # AWS secrets store configuration. Only relevant if the `aws` secrets store
    # type is configured.
    aws:
      # The AWS region to use. This must be set to the region where the AWS
      # Secrets Manager service that you want to use is located.
      region_name: us-east-1

      # The AWS credentials to use to authenticate with the AWS Secrets
      # Manager instance. You can omit these if you are running the ZenML server
      # in an AWS EKS cluster that has an IAM role attached to it that has
      # permissions to access the AWS Secrets Manager instance.
      # NOTE: setting this is the same as setting the AWS_ACCESS_KEY_ID,
      # AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN environment variables
      # in the zenml.secretEnvironment variable.
      aws_access_key_id:
      aws_secret_access_key:
      aws_session_token:

      # The AWS Secrets Manager has a known issue where it does not immediately
      # reflect new and updated secrets in the `list_secrets` results. To work
      # around this issue, you can set this value to a non-zero value to
      # get the ZenML server to wait after creating or updating an AWS secret
      # until the changes are reflected in the secrets returned by
      # `list_secrets` or the number of seconds specified by this value has
      # elapsed. Should not be set to a high value as it may cause thread
      # starvation in the ZenML server on high load.
      secret_list_refresh_timeout: 0

    # GCP secrets store configuration. Only relevant if the `gcp` secrets store
    # type is configured.
    gcp:
      # The GCP project ID to use. This must be set to the project ID where the
      # GCP Secrets Manager service that you want to use is located.
      project_id: my-gcp-project

      # Path to the GCP credentials file to use to authenticate with the GCP Secrets
      # Manager instance. You can omit this if you are running the ZenML server
      # in a GCP GKE cluster that uses workload identity to authenticate with
      # GCP services without the need for credentials.
      # NOTE: the credentials file needs to be copied in the helm chart folder
      # and the path configured here needs to be relative to the root of the
      # helm chart.
      google_application_credentials:

    # AWS Key Vault secrets store configuration. Only relevant if the `azure`
    # secrets store type is configured.
    azure:
      # The name of the Azure Key Vault. This must be set to point to the Azure
      # Key Vault instance that you want to use.
      key_vault_name:

      # The Azure application service principal credentials to use to
      # authenticate with the Azure Key Vault API. You can omit these if you are
      # running the ZenML server hosted in Azure and are using a managed
      # identity to access the Azure Key Vault service.
      # NOTE: setting this is the same as setting the AZURE_CLIENT_ID,
      # AZURE_CLIENT_SECRET, and AZURE_TENANT_ID environment variables
      # in the zenml.secretEnvironment variable.
      azure_client_id:
      azure_client_secret:
      azure_tenant_id:

    # HashiCorp Vault secrets store configuration. Only relevant if the `hashicorp`
    # secrets store type is configured
    hashicorp:
      # The url of the HashiCorp Vault server
      vault_addr: https://vault.example.com
      # The token used to authenticate with the Vault server
      vault_token:
      # The Vault Enterprise namespace. Not required for Vault OSS.
      vault_namespace:
      # The maximum number of secret versions to keep. If not set, the default
      # value of 1 will be used (only the latest version will be kept).
      max_versions:

    # Custom secrets store configuration. Only relevant if the `custom` secrets
    # store type is configured.
    custom:
      # The class path of the custom secrets store implementation. This should
      # point to a full Python class that extends the
      # `zenml.zen_stores.secrets_stores.base_secrets_store.BaseSecretsStore`
      # base class. The class should be importable from the container image
      # that you are using for the ZenML server.
      #
      # Any additional configuration options for the custom secrets store
      # implementation should be passed through the `environment` and the
      # `secretEnvironment` variables and using the `ZENML_SECRETS_STORE_<OPTION_NAME>`
      # environment variable naming convention. For example, if the custom
      # secrets store implementation expects an `aws_access_key_id` option, you
      # should set the `ZENML_SECRETS_STORE_AWS_ACCESS_KEY_ID` environment
      # variable in the `zenml.secretEnvironment` variable.
      class_path: my.custom.secrets.store.MyCustomSecretsStore

  # Extra environment variables to set in the ZenML server container.
  environment: {}

  # Extra environment variables to set in the ZenML server container that
  # should be kept secret. These will be set as Kubernetes secrets and
  # mounted as environment variables in the ZenML server container.
  secretEnvironment: {}

  service:
    type: LoadBalancer # Changed from ClusterIP
    port: 80

  ingress:
    enabled: false # Changed from true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      # nginx.ingress.kubernetes.io/rewrite-target: /$1
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: "letsencrypt"

    # hint: you can use a service like nip.io to get a wildcard DNS for your
    # ingress IP address. For example, if your ingress IP is 192.168.0.1, you
    # can use a host name like zenml.192.168.0.1.nip.io. This allows you to
    # reuse the same ingress for multiple deployments and/or services.
    host:
    path: /
    tls:
      enabled: false
      # NOTE: if enabled, this will generate self-signed certificates during
      # installation. This also requires that the ingress host be set to the
      # domain name or IP address used to access the ZenML server from outside
      # the cluster.
      generateCerts: false
      secretName: zenml-tls-certs

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "zenml"

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  # capabilities:
  #   drop:
  #   - ALL

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
